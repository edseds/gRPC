// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: calculator.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Calc {
  public static partial class CalculatorService
  {
    static readonly string __ServiceName = "calc.CalculatorService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Calc.CalculatorRequest> __Marshaller_calc_CalculatorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.CalculatorRequest.Parser));
    static readonly grpc::Marshaller<global::Calc.CalculatorResponse> __Marshaller_calc_CalculatorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.CalculatorResponse.Parser));
    static readonly grpc::Marshaller<global::Calc.PrimeNumberRequest> __Marshaller_calc_PrimeNumberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.PrimeNumberRequest.Parser));
    static readonly grpc::Marshaller<global::Calc.PrimeNumberResponse> __Marshaller_calc_PrimeNumberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.PrimeNumberResponse.Parser));
    static readonly grpc::Marshaller<global::Calc.ComputeAvgRequest> __Marshaller_calc_ComputeAvgRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.ComputeAvgRequest.Parser));
    static readonly grpc::Marshaller<global::Calc.ComputeAvgResponse> __Marshaller_calc_ComputeAvgResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.ComputeAvgResponse.Parser));
    static readonly grpc::Marshaller<global::Calc.FindMaxNumberRequest> __Marshaller_calc_FindMaxNumberRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.FindMaxNumberRequest.Parser));
    static readonly grpc::Marshaller<global::Calc.FindMaxNumberResponse> __Marshaller_calc_FindMaxNumberResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Calc.FindMaxNumberResponse.Parser));

    static readonly grpc::Method<global::Calc.CalculatorRequest, global::Calc.CalculatorResponse> __Method_Calc = new grpc::Method<global::Calc.CalculatorRequest, global::Calc.CalculatorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Calc",
        __Marshaller_calc_CalculatorRequest,
        __Marshaller_calc_CalculatorResponse);

    static readonly grpc::Method<global::Calc.PrimeNumberRequest, global::Calc.PrimeNumberResponse> __Method_PrimeNumber = new grpc::Method<global::Calc.PrimeNumberRequest, global::Calc.PrimeNumberResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "PrimeNumber",
        __Marshaller_calc_PrimeNumberRequest,
        __Marshaller_calc_PrimeNumberResponse);

    static readonly grpc::Method<global::Calc.ComputeAvgRequest, global::Calc.ComputeAvgResponse> __Method_ComputeAvg = new grpc::Method<global::Calc.ComputeAvgRequest, global::Calc.ComputeAvgResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ComputeAvg",
        __Marshaller_calc_ComputeAvgRequest,
        __Marshaller_calc_ComputeAvgResponse);

    static readonly grpc::Method<global::Calc.FindMaxNumberRequest, global::Calc.FindMaxNumberResponse> __Method_FindMaxNumber = new grpc::Method<global::Calc.FindMaxNumberRequest, global::Calc.FindMaxNumberResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "FindMaxNumber",
        __Marshaller_calc_FindMaxNumberRequest,
        __Marshaller_calc_FindMaxNumberResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Calc.CalculatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CalculatorService</summary>
    [grpc::BindServiceMethod(typeof(CalculatorService), "BindService")]
    public abstract partial class CalculatorServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Calc.CalculatorResponse> Calc(global::Calc.CalculatorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task PrimeNumber(global::Calc.PrimeNumberRequest request, grpc::IServerStreamWriter<global::Calc.PrimeNumberResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Calc.ComputeAvgResponse> ComputeAvg(grpc::IAsyncStreamReader<global::Calc.ComputeAvgRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task FindMaxNumber(grpc::IAsyncStreamReader<global::Calc.FindMaxNumberRequest> requestStream, grpc::IServerStreamWriter<global::Calc.FindMaxNumberResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CalculatorService</summary>
    public partial class CalculatorServiceClient : grpc::ClientBase<CalculatorServiceClient>
    {
      /// <summary>Creates a new client for CalculatorService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CalculatorServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CalculatorService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CalculatorServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CalculatorServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CalculatorServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Calc.CalculatorResponse Calc(global::Calc.CalculatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Calc(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Calc.CalculatorResponse Calc(global::Calc.CalculatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Calc, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Calc.CalculatorResponse> CalcAsync(global::Calc.CalculatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CalcAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Calc.CalculatorResponse> CalcAsync(global::Calc.CalculatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Calc, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Calc.PrimeNumberResponse> PrimeNumber(global::Calc.PrimeNumberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrimeNumber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Calc.PrimeNumberResponse> PrimeNumber(global::Calc.PrimeNumberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_PrimeNumber, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Calc.ComputeAvgRequest, global::Calc.ComputeAvgResponse> ComputeAvg(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ComputeAvg(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Calc.ComputeAvgRequest, global::Calc.ComputeAvgResponse> ComputeAvg(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ComputeAvg, null, options);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Calc.FindMaxNumberRequest, global::Calc.FindMaxNumberResponse> FindMaxNumber(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindMaxNumber(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Calc.FindMaxNumberRequest, global::Calc.FindMaxNumberResponse> FindMaxNumber(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_FindMaxNumber, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CalculatorServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CalculatorServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalculatorServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Calc, serviceImpl.Calc)
          .AddMethod(__Method_PrimeNumber, serviceImpl.PrimeNumber)
          .AddMethod(__Method_ComputeAvg, serviceImpl.ComputeAvg)
          .AddMethod(__Method_FindMaxNumber, serviceImpl.FindMaxNumber).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalculatorServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Calc, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Calc.CalculatorRequest, global::Calc.CalculatorResponse>(serviceImpl.Calc));
      serviceBinder.AddMethod(__Method_PrimeNumber, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Calc.PrimeNumberRequest, global::Calc.PrimeNumberResponse>(serviceImpl.PrimeNumber));
      serviceBinder.AddMethod(__Method_ComputeAvg, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Calc.ComputeAvgRequest, global::Calc.ComputeAvgResponse>(serviceImpl.ComputeAvg));
      serviceBinder.AddMethod(__Method_FindMaxNumber, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Calc.FindMaxNumberRequest, global::Calc.FindMaxNumberResponse>(serviceImpl.FindMaxNumber));
    }

  }
}
#endregion
